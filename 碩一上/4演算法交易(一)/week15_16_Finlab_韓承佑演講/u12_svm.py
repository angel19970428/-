# -*- coding: utf-8 -*-
"""u12_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TCnSjxgWdlMbGtDq5DztawjD57lDZqGW

# Support Vector Machine (SVM)

## features
"""

!rm -r finlab_course_20191218
!git clone https://github.com/koreal6803/finlab_course_20191218.git

import pandas as pd

close = pd.read_pickle('finlab_course_20191218/close_price.pkl')
fundamental = pd.read_pickle('finlab_course_20191218/fundamental_data.pkl')
adj_close = pd.read_pickle('finlab_course_20191218/adj_close_price.pkl')

close

dataset = fundamental.copy()

features = ['R103_ROE稅後', 'R402_營業毛利成長率']

dataset = dataset[features]
dataset = dataset.dropna()

"""## add prediction"""

def profit(dataset, n=1):
    
    dates = sorted(list(set(dataset.reset_index()['date'])))
        
    tomorrow_adj_close = adj_close.shift(-1)
    tomorrow_adj_close = tomorrow_adj_close.reindex(dates, method='bfill')
    
    
    p = (tomorrow_adj_close.shift(-n) / tomorrow_adj_close)
    return p.unstack()

dataset['return'] = profit(dataset)
dataset.head()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
dataset.plot.scatter(features[0], features[1])

"""## remove outliers"""

def is_valid(feature, nstd):
    ub = feature.mean() + nstd * feature.std()
    lb = feature.mean() - nstd * feature.std()

    return (feature > lb) & (feature <ub)

valid = is_valid(dataset['R103_ROE稅後'], 2) & is_valid(dataset['R402_營業毛利成長率'], 0.05)
dataset_rmoutliers = dataset[valid].dropna()

dataset_rmoutliers['R103_ROE稅後'].hist(bins=100)
dataset_rmoutliers['R402_營業毛利成長率'].hist(bins=100)

"""## transform features to normal distribution"""

import pandas as pd
import sklearn.preprocessing as preprocessing

dataset_scaled = pd.DataFrame(preprocessing.scale(dataset_rmoutliers), index=dataset_rmoutliers.index, columns=dataset_rmoutliers.columns)
dataset_scaled.head()

dataset_scaled['R103_ROE稅後'].hist(bins=100)
dataset_scaled['R402_營業毛利成長率'].hist(bins=100, alpha=0.5)
dataset_scaled['return'] = dataset_rmoutliers['return']

"""## Training"""

from sklearn.model_selection import train_test_split

dataset_train, dataset_test = train_test_split(dataset_scaled, test_size=0.1, random_state=0)

from sklearn.svm import SVC

cf = SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
  decision_function_shape='ovr', degree=3, gamma='auto_deprecated',
  kernel='rbf', max_iter=-1, probability=False, random_state=None,
  shrinking=True, tol=0.001, verbose=False)

cf.fit(dataset_train[features], dataset_train['return'] > 1)

from mlxtend.plotting import plot_decision_regions

features_plot = dataset_test[features].values
labels_plot = (dataset_test['return'] > dataset_test['return'].quantile(0.5)).astype(int).values

plot_decision_regions(features_plot, labels_plot, cf)

#dtest.index.get_level_values('date') > '2017'

"""## backtest"""

dataset_backtest = dataset_test.copy()
dataset_backtest['prediction'] = cf.predict(dataset_test[features])
dataset_backtest

condition= dataset_backtest['prediction'] == True
dataset_backtest = dataset_backtest[condition]
dataset_backtest.groupby(dataset_backtest.index.get_level_values('date')).mean()['return'].cumprod().plot()