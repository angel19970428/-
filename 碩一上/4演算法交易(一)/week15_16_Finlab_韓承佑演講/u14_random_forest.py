# -*- coding: utf-8 -*-
"""u14_random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UIKvfIZAlEsMtcRE5wPxmCOMUpqMuz3D

# Random Forest Classifier

## Get dataset
"""

!rm -r finlab_course_20191218
!git clone https://github.com/koreal6803/finlab_course_20191218.git

import pandas as pd

close = pd.read_pickle('finlab_course_20191218/close_price.pkl')
fundamental = pd.read_pickle('finlab_course_20191218/fundamental_data.pkl')
adj_close = pd.read_pickle('finlab_course_20191218/adj_close_price.pkl')

dataset = fundamental.copy()
dataset = dataset.dropna(thresh=int(len(dataset)*0.5), axis=1).dropna(how='any')

close

"""## Add labels"""

features = dataset.columns

def profit(dataset, n=1):
    
    dates = sorted(list(set(dataset.reset_index()['date'])))
        
    tomorrow_adj_close = adj_close.shift(-1)
    tomorrow_adj_close = tomorrow_adj_close.reindex(dates, method='bfill')
    
    
    p = (tomorrow_adj_close.shift(-n) / tomorrow_adj_close)
    return p.unstack()

dataset['return'] = profit(dataset)
dataset = dataset.dropna()
dataset.head()

"""## Split Train Test dataset"""

select = dataset.index.get_level_values('date') < '2017'
dataset_train = dataset[select]
dataset_test = dataset[~select]

"""## Training"""

from sklearn.ensemble import RandomForestClassifier

cf = RandomForestClassifier(200)
cf.fit(dataset_train[features], dataset_train['return'] > 1)

"""## Prediction"""

import pandas as pd
prediction = cf.predict(dataset_test[features])

"""## Backtest"""

returns1 = dataset_test['return'][prediction == True]
dates = returns1.index.get_level_values('date')
returns1.groupby(dates).mean().cumprod().plot()

returns2 = dataset_test['return'][prediction == False]
dates = returns2.index.get_level_values('date')
returns2.groupby(dates).mean().cumprod().plot()

"""## Feature Importance"""

importance = pd.Series(cf.feature_importances_, index=features).sort_values(ascending=False)
importance

"""## New Strategy using feature importance"""

def add_feature(dataset, feature_name, feature):
    feature_series = feature.reindex(dataset.index.levels[1], method='ffill').unstack().reindex(dataset.index)
    dataset[feature_name] = feature_series

sma = close.rolling(60, min_periods=10).mean()
bias = close / sma

add_feature(dataset, 'bias', bias)
dataset.head()

items = list(importance.index[:20])

def select(df):
    rank = df[items].rank(pct=True).sum(axis=1)
    return df[rank > rank.quantile(0.9)]['return'].mean()

dates = dataset.index.get_level_values('date')
dataset.groupby(dates).apply(select).cumprod().plot()
dataset['return'].groupby(dates).mean().cumprod().plot()

"""## Improvement"""



